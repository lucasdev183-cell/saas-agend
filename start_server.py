#!/usr/bin/env python
"""
Script para iniciar o servidor Django com verifica√ß√µes autom√°ticas
Sistema de Agendamento e Gest√£o
"""
import os
import sys
import subprocess
import time
import socket

def check_port(port):
    """Verificar se uma porta est√° dispon√≠vel"""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    result = sock.connect_ex(('localhost', port))
    sock.close()
    return result != 0  # True se porta est√° livre

def kill_process_on_port(port):
    """Matar processo que est√° usando uma porta espec√≠fica"""
    try:
        if os.name == 'nt':  # Windows
            result = subprocess.run(f'netstat -ano | findstr :{port}', shell=True, capture_output=True, text=True)
            if result.stdout:
                lines = result.stdout.strip().split('\n')
                for line in lines:
                    if 'LISTENING' in line:
                        pid = line.split()[-1]
                        subprocess.run(f'taskkill /F /PID {pid}', shell=True)
                        print(f"‚úÖ Processo PID {pid} finalizado na porta {port}")
        else:  # Linux/Mac
            result = subprocess.run(f'lsof -ti:{port}', shell=True, capture_output=True, text=True)
            if result.stdout:
                pid = result.stdout.strip()
                subprocess.run(f'kill -9 {pid}', shell=True)
                print(f"‚úÖ Processo PID {pid} finalizado na porta {port}")
        
        time.sleep(2)  # Aguardar processo finalizar
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao finalizar processo na porta {port}: {e}")
        return False

def check_django_setup():
    """Verificar se Django est√° configurado corretamente"""
    print("üîç Verificando configura√ß√£o Django...")
    
    # Verificar se manage.py existe
    if not os.path.exists('manage.py'):
        print("‚ùå Arquivo manage.py n√£o encontrado!")
        return False
    
    # Verificar se core app existe
    if not os.path.exists('core'):
        print("‚ùå App 'core' n√£o encontrado!")
        return False
    
    # Verificar se arquivo de migra√ß√£o existe
    if not os.path.exists('core/migrations'):
        print("‚ö†Ô∏è  Pasta migrations n√£o encontrada, criando...")
        os.makedirs('core/migrations', exist_ok=True)
        
        # Criar __init__.py
        with open('core/migrations/__init__.py', 'w') as f:
            f.write('')
    
    print("‚úÖ Configura√ß√£o Django OK!")
    return True

def run_migrations():
    """Executar migra√ß√µes Django"""
    print("üóÑÔ∏è Executando migra√ß√µes...")
    
    try:
        # Fazer migra√ß√µes
        result = subprocess.run([sys.executable, 'manage.py', 'makemigrations'], 
                              capture_output=True, text=True)
        if result.returncode != 0:
            print(f"‚ö†Ô∏è  Aviso makemigrations: {result.stderr}")
        
        # Aplicar migra√ß√µes
        result = subprocess.run([sys.executable, 'manage.py', 'migrate'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Migra√ß√µes aplicadas com sucesso!")
            return True
        else:
            print(f"‚ùå Erro nas migra√ß√µes: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao executar migra√ß√µes: {e}")
        return False

def start_server(port=8000):
    """Iniciar servidor Django"""
    print(f"üöÄ Iniciando servidor na porta {port}...")
    
    try:
        # Comando para iniciar servidor
        cmd = [sys.executable, 'manage.py', 'runserver', f'0.0.0.0:{port}']
        
        print("=" * 60)
        print("üåê Servidor Django iniciado!")
        print(f"üìç Acesse: http://localhost:{port}")
        print("üîë Credenciais: admin / admin123")
        print("‚å®Ô∏è  Pressione Ctrl+C para parar o servidor")
        print("=" * 60)
        
        # Iniciar servidor (vai rodar at√© ser interrompido)
        subprocess.run(cmd)
        
    except KeyboardInterrupt:
        print("\nüõë Servidor interrompido pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro ao iniciar servidor: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Sistema de Agendamento - Inicializa√ß√£o do Servidor")
    print("=" * 60)
    
    # Verificar configura√ß√£o Django
    if not check_django_setup():
        print("‚ùå Falha na verifica√ß√£o Django")
        return False
    
    # Verificar porta 8000
    port = 8000
    if not check_port(port):
        print(f"‚ö†Ô∏è  Porta {port} est√° em uso. Tentando liberar...")
        if not kill_process_on_port(port):
            print(f"‚ùå N√£o foi poss√≠vel liberar a porta {port}")
            print("üí° Tente usar uma porta diferente ou reiniciar o computador")
            return False
    
    # Executar migra√ß√µes
    if not run_migrations():
        print("‚ö†Ô∏è  Erro nas migra√ß√µes, mas continuando...")
    
    # Iniciar servidor
    start_server(port)
    
    return True

if __name__ == "__main__":
    main()